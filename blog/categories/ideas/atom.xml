<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ideas | MicTech's Blog]]></title>
  <link href="http://blog.mictech.cz/blog/categories/ideas/atom.xml" rel="self"/>
  <link href="http://blog.mictech.cz/"/>
  <updated>2013-03-03T20:47:43+01:00</updated>
  <id>http://blog.mictech.cz/</id>
  <author>
    <name><![CDATA[Michal Těhník]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hackathon a Coderetreat jako součást příjímacího řízení]]></title>
    <link href="http://blog.mictech.cz/blog/2013/01/27/hackathon-a-coderetreat-jako-soucast-prijimaciho-rizeni/"/>
    <updated>2013-01-27T22:39:00+01:00</updated>
    <id>http://blog.mictech.cz/blog/2013/01/27/hackathon-a-coderetreat-jako-soucast-prijimaciho-rizeni</id>
    <content type="html"><![CDATA[<p>Klasická příjímací pohovory nedávají moc možností, jak zjistit jestli člověk dobré ovládá svojí lopatu.</p>

<p>1) HR dostane CV od uchazeče. Zkontroluje jestli zkratky a počet let u nich se shodují se zkratkami u otevřené pozice. Pokud ano, jde uchazeč do dalšího kola.</p>

<p>2) Dále probíhá pohovor, někdy rozdělený do dvou částí. Na technický/telefonický a osobní. Technický je pouze o grilování toho co člověk o sobě nalhal v CV. Osobní pohovor je pak spíše o tom, jestli daný člověk zapadá do firemní kultůry.</p>

<p>Někdy padají na pohovorech otázky na Quicksort, dědičnost, JOINy  nebo znalost knihoven. Což jsou sice pěkné akademičnosti, ale mají nulovou vypovídací hodnotu o tom, jak člověk pracuje.</p>

<p>Podle mě, jednou z věcí která dělá dobrého vývojáře, jsou jeho návyky, nástroje jaké používá a hlavně jakým způsobem. Proto si myslím, že by součástí příjímacího pohovoru mělo být nějaké programování. A proč ne rovnou programování v extrémních podmínkách.</p>

<p>Vždycky trpím, když vidím, jak někdo používá IDE a soubory hledá v adresářové struktůře projektu. I taková drobnost, jako používání tabulátoru pro doplňování názvů v BASHi nebo PowerShellu dokáže zvýšit vaši efektivitu.</p>

<h2>Hackathon</h2>

<p>Možností je několik. Jednou z nich je pozvání uchazeče nebo uchazečů na regulérní firemní hackathon nebo uspořádaní speciálního pro potřeby náboru.</p>

<p>Akce typu Hackathon ukáže několik vlastností.
* Jak rychle se dokáže člověk adaptovat na nové technologie a prostředí.
* Jestli je schopen se dostat na stejnou vlnu se zbytkem týmu.
* Schopnost pracovat pod stresem a zároveň dokončovat svoji práci.</p>

<p>Takový hackathon může být uspořádan například týmem, do kterého by případný zájemce o práci měl nastoupit.</p>

<h2>Coderetreat</h2>

<p>Je zaměřený na čistou práci. Uchazeč bude dopředu upozorněn, aby se seznámil s Game of Life a přinesl si sebou notebook s IDE a testovacím frameworkem.</p>

<p>Dále by následovali 2-3 session. První na oťukání s člověkem se kterým bude párovat. Druhá rovnou test first, tělo metody na maximálně 4 řádky a bez návratových hodnot. Prostě pěkně zostra.</p>

<h2>Code Kata</h2>

<p>Díky Alešovi (<a href="https://twitter.com/alesroubicek/status/294487232457351168">twitter</a>), který mě upozornil ještě na Code Kata. Tady by si uchazeč přinesl pouze vlastní notebook s IDE a testovacím frameworkem. Ukázal by, třeba na projektoru, jak dokáže zpracovat zadanou úlohu, která by mu nebyla předem známa. Ať už by se jednalo o nějakou standartní nebo vlastní. Nedělám si iluze o tom, že programátoři ve velké míře znají Katy a už vůbec, že by si je doma procvičovali.</p>

<hr />

<p>Myšlenkou tohoto je vidět naživo, jak člověk pracuje. Jakým způsobem ovládá svoji lopatu a jestli je schopen párového programování.</p>

<hr />

<p><a href="http://en.wikipedia.org/wiki/Hackathon">Hackathon</a>  <br/>
<a href="http://coderetreat.org/">Coderetreat</a><br/>
<a href="http://codekata.pragprog.com/codekata/">Code Kata</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Korespondenční Coderetreat]]></title>
    <link href="http://blog.mictech.cz/blog/2012/12/10/correspondence-coderetreat/"/>
    <updated>2012-12-10T21:28:00+01:00</updated>
    <id>http://blog.mictech.cz/blog/2012/12/10/correspondence-coderetreat</id>
    <content type="html"><![CDATA[<p>V průběhu sobotního Coderetreatu mě napadla varianta cvičení pro programátory. Jednalo by se o takzvaný korespondenční Coderetreat / TDD Ping Pong.</p>

<p>TDD Ping Pong je založený na tom, že programátoři se v páru střídají v psaní kódu. Jeden napíše implementaci a padající test, ten druhů napíše implementaci pro test a další padající test. A takto stále dokola.</p>

<p>V korespondenčním Coderetreatu by programátoři nebyli spolu v přímem kontaktu, ale měli by GIT repository (né nutně to musí být GIT) a každý commit by bylo takové vystřídání.</p>

<p>Výhodou je, že spolu máte možnost hovořit čistě přes kód, když se vyvarujete popisným commit messages, instant messagingu a dalším způsobám komunikace.</p>

<p>Samozřejmně není problém dát si na začátku nějakou challenge<br/>
-  kód metody na čtyři řádky<br/>
-  immutable objekty<br/>
-  žádné návratové hodnoty</p>

<p>Sice nevymažete kód po 45ti minutách, ale můžete si stanovit počet commitů po kterých vymažete kód, resp. smažete celou repository. Optimální číslo by mohlo být 10 - 15 commitů, tj. 10 - 15 vystřídání v páru. Což je zhruba maximální počet, kolikrát jste schopnit to stihnout během jedné session na Coderetreatu.</p>

<p>Důležité je ovšem dodržet tzv. minimální implementaci. Což znamená, že během jednoho commitu nepřepíšete veškerý kód, ale napíšete minimální implementaci, tak aby test prošel a zároveň vytvoříte další jednoduchý test. Zde varuji, aby se toto nezvrhlo v otevřenou válku, kde si vzájemně budete házet klacky pod nohy.</p>

<p>Samozřejmně zde chybí pair programming, ale máte možnost se cvičit s kolegou/kamarádem v TDD, Refactoringu a čistém kódu.</p>

<p>Pokud by měl někdo zájem to zkusit přímo semnou, budu rád. Ozvěte se přes Twitter @MicTech nebo další sociální sítě. Jazyky ideálně C# nebo Ruby, ale nebránim se Jave, JavaScriptu, téměr ničemu.</p>

<p>Případně můžete vytvořit pull request přímo v repository na to určené (C#, VS2012): <a href="https://github.com/MicTech/CorrespondenceCoderetreat">GitHub - Correspondence Coderetreat</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infrastructurer]]></title>
    <link href="http://blog.mictech.cz/blog/2012/05/09/infrastructurer/"/>
    <updated>2012-05-09T22:43:00+02:00</updated>
    <id>http://blog.mictech.cz/blog/2012/05/09/infrastructurer</id>
    <content type="html"><![CDATA[<h3>Pomoc s budováním infrastruktůry</h3>

<hr />

<p>Před pár měsíci, jsem pouze ze srandy napsal na twitter, aby Borek Bernard udělal startup, který bude startupům pomáhat s infrastruktůrou.</p>

<blockquote class="twitter-tweet" data-in-reply-to="166818518896099329"><p>@<a href="https://twitter.com/borekb">borekb</a> Naber ještě @<a href="https://twitter.com/alesroubicek">alesroubicek</a> a udělejte startup na konzultace pro startupy "Jak správně vybudovat infrastrukturu pro startup" :)</p>&mdash; Michal Těhník (@MicTech) <a href="https://twitter.com/MicTech/status/167554095077531649" data-datetime="2012-02-09T10:23:03+00:00">February 9, 2012</a></blockquote>


<script src="http://blog.mictech.cz//platform.twitter.com/widgets.js" charset="utf-8"></script>


<hr />

<p>Poté jsem absolvoval několik školení od Radima Marka, a myšlenka byla na světě.</p>

<hr />

<p>Budovat infrastruktůru od začátku, bez předchozích zkušeností, to není v začínající firmě nic jednoduchého. Taková firma je složená z několika lidí, kteří sdílejí společný cíl a to obvykle není nic menšího, než změnit svět. Mezi nimi málokdy bývá nějaký sysadmin nebo podobný člověk, který má znalosti a zkušenosti se zmíněným problémem.</p>

<p>Pro takový tým najít správné nástroje, správné postupy, a to všechno zautomatizovat podle jejich představ, zabere dny a týdny práce. Tento propálený čas je na začátku k ničemu a vůbec nepřispívá k cestě, na kterou se vydali, ale naopak jí brzdí. Lidé chtějí pracovat na tom, aby dosáhli svého vytyčeného cíle. Když jedete autem, také chcete dojet do cíle a rozhodně nechcete cestou stavět svodidla a dopravní značení kolem silnice.</p>

<p>Kvalitní infrastruktůra nepřinese na začátku žádný užitek, žádné peníze ani uživatele. Její přínos se projeví, až po čase, kdy produkt bude mít nějaké uživatele. Jenže to je obvykle pozdě začít s budováním infrastruktůry.</p>

<p>Taková aplikace je na začátku na jednom stroji, typicky u vývojářů, kde běží společně s databází. Případně na nějakém VPSku. A v tu chvíli nepříchází myšlenky na několik aplikačních serverů nebo databáze v clusteru.</p>

<p>Nasypat aplikaci na Heroku a o víc se nestarat možná ušetří čas, ale rozhodně neušetří peníze.</p>

<p>Výběr těch správných nástrojů může zabrat týdny hledání a zkoušení. Další čas zabere jejich společná integrace.</p>

<p>Kvalitní infrastruktůra a nástroje pro podporu vývoje jsou běh na dlouhou trať, ale obvykle na začátku, chcete sprintovat.</p>

<hr />

<h3>Integrace a automatizace</h3>

<p>Před deseti lety by člověk měl jednoduché rozhodování, na čem aplikaci vyvinout, kde jí provozovat, jaké technologie a nástroje použít. Dnes existuje několik programovacích jazyků, každý z nich má několik frameworků. Na každý nástroj pro podporu vývoje existuje desítky alternativ. Existují stovky kombinací.</p>

<p>Prostředí, kde tyto aplikace provozovat, se také změnilo, různé PaaS nebo IaaS řešení.</p>

<p>Jazyky - ruby, python, c#, java<br/>
Frameworky - rails, sinatra, django, ASP.NET MVC, Spring<br/>
Produkční prostředí - balancer, app server, db server<br/>
Nástroje - chef, vagrant, teamcity, git
Poskytovatelé - Amazon, Rackspace, Linode, Heroku</p>

<p>První krok je bezproblémové a rychlé zprovoznění aplikace na vývojářské mašině. Checkout z VCS, spustit jeden příkaz a mám běžící aplikaci.</p>

<p>Dále mě zajímá integrace VCS a issue trackeru. Pak se na to nabaluje build server, unit testy, integrační testy, atd. A končí to u automatického deploye na produkci.</p>

<p>Tohle všechno musí být automatizováno, aby se vyloučila lidská chyba a celý proces se urychlil a vývojáři mohli pracovat na tom co je baví.</p>

<h3>Na čem vydělat?</h3>

<p>Moje myšlenka je založena na prodeji typizovaných řešení pro různé aplikace. Takové typizované řešení může být složeno z virtuálních strojů, cookbooků pro Chef, atd.</p>

<p>Typický scénář, chci hostovat na nějakém VPS, mám Rails aplikaci, potřebuju dva aplikační servery a jeden databázový.</p>

<p>Zákazníkovi prodám/pronajmu připravené instance třeba na Amazonu se vším co bude k provozu takové aplikace potřebovat (monitoring, integrace s VCS).</p>

<p>Dále pak individální konzulace a příprava řešení na míru, což je vhodné v pozdějších fázích, kdy se řeší škálovatelnost.</p>

<p>Další možností je pronájem/prodej prostředí. Například virtuální image s TeamCity, s podporou buildování Rails aplikace, spouštěním testů a integraci s GitHubem. Tady jsou kombinace defakto neomezené.</p>
]]></content>
  </entry>
  
</feed>
